generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                   String  @map("user_id") @db.Uuid
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  access_token             String?
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  password      String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Bookmark      Bookmark[]

  @@map("users")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Listing {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  SellPost SellPost[]
}

model SellPost {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String
  status      String
  listingId   String  @map("listing_id") @db.Uuid
  listing     Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  listingId String @map("listing_id") @db.Uuid
  userId    String @map("user_id") @db.Uuid
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
